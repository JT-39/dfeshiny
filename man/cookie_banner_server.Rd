% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cookies.R
\name{cookie_banner_server}
\alias{cookie_banner_server}
\title{cookie_banner_server}
\usage{
cookie_banner_server(
  id,
  input_cookies,
  parent_session,
  google_analytics_key = NULL,
  cookie_link_panel
)
}
\arguments{
\item{id}{Shiny tag shared with cookie_banner_ui()}

\item{input_cookies}{The cookie input passed from cookies.js (should always
be reactive(input$cookies))
Should always be set to reactive(input$cookie_consent_clear).}

\item{parent_session}{This should be the R Shiny app session}

\item{google_analytics_key}{Provide the GA 10 digit key of the form
"ABCDE12345"}

\item{cookie_link_panel}{name of the navlistPanel that the cookie banner
provides a link to, usually "cookies_panel_ui"}
}
\description{
cookie_banner_server() provides the server module to be used alongside
cookie_banner_ui(). Place cookie_banner_server() as a call in your server.R
file to provide the server functions to control users being able to accept or
reject cookie consent for the provision of Google Analytics tracking on DfE
R-Shiny dashboards.
}
\examples{
# This will be in your global.R script

library(shiny)
library(shinyjs)
library(dfeshiny)

# This will be what is in your ui.R script

ui <- fluidPage(
  # Place these lines above your header

  dfe_cookie_script(),
  useShinyjs(),
  cookie_banner_ui("cookies", name = "My DfE R-Shiny data dashboard"),

  # Use the cookies panel under the head but in the main content

  cookies_panel(
    cookie_status_output = "cookie_status"
  )
)

# This will be in your server.R file

server <- function(input, output, session) {
  output$cookie_status <- dfeshiny::cookie_banner_server(
    "cookies",
    input_cookies = reactive(input$cookies),
    input_clear = reactive(input$cookie_consent_clear),
    parent_session = session,
    google_analytics_key = "ABCDE12345"
  )
}

# This is just an example of how to run the minimal app in this example
if (interactive())
  shinyApp(ui, server)

}
